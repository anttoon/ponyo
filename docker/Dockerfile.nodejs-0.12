# Runs the app as a docker container, to get started on your machine:
# * install boot2docker
# build the container:  docker build -t node-starterapp .
# run the container: docker run -d -i -p 3000:3000 node-starterapp
# To run the container as e dev env, the app directory needs to mounted in container as a volume.
#
FROM alpine:3.2

MAINTAINER Infra team Expressen <infra@expressen.se>

ENV VERSION=v0.12.7 CMD=node DOMAIN=nodejs.org NPM_VERSION=3.5.0

RUN apk add --update curl make gcc g++ python linux-headers paxctl libgcc libstdc++ && \
  curl -sSL https://${DOMAIN}/dist/${VERSION}/${CMD}-${VERSION}.tar.gz | tar -xz && \
  cd /${CMD}-${VERSION} && \
  ./configure --prefix=/usr ${CONFIG_FLAGS} && \
  make -j$(grep -c ^processor /proc/cpuinfo 2>/dev/null || 1) && \
  make install && \
  paxctl -cm /usr/bin/${CMD} && \
  cd / && npm install -g npm@${NPM_VERSION} && \
  rm -rf /${CMD}-${VERSION} ${RM_DIRS} \
    /usr/share/man /tmp/* /root/.npm /root/.node-gyp /usr/lib/node_modules/npm/man \
    /usr/lib/node_modules/npm/doc /usr/lib/node_modules/npm/html

RUN apk add git varnish bash && npm install -g pm2@latest && mkdir -p /exp-container/app && \
    mkdir -p /exp-container/logs && mkdir -p /exp-container/data
RUN addgroup -S web
RUN adduser -S -G web web

ADD start.sh /exp-container/
ADD exec /exp-container/exec
ADD config /exp-container/config

RUN chown -R web:web /exp-container
RUN chmod +x /exp-container/exec/*.sh

ONBUILD ENTRYPOINT ["/exp-container/start.sh"]
ONBUILD VOLUME ["/exp-container/data"]
